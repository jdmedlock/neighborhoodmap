{"version":3,"sources":["components/Map.js","utils/VenueInfo.js","utils/utilFunctions.js","components/InfoWindow.js","utils/MapsAPI.js","utils/FoursquareAPI.js","components/SearchInput.js","components/SearchResults.js","components/SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","react_default","a","createElement","grid","span","id","Place","venueDetail","_venueDetail$venue$lo","venue","location","address","city","state","postal_code","undefined","concat","this","getFormattedAddress","firstComma","indexOf","slice","name","rating","toFixed","getRating","noWholeStars","Math","floor","starRating","i","hereNow","summary","status","getHereNow","categories","length","shortName","charAt","toUpperCase","string","specialCharArray","split","map","char","join","removeSpecialChars","firstCategory","getFirstCategory","InfoWindow","VenueInfo","getName","createFormattedAddressHTML","createFirstCategoryHTML","createHereNowHTML","MapsAPI","url","callback","script","document","type","onload","getElementsByTagName","appendChild","src","home","Promise","resolve","reject","window","google","maps","getElementById","center","lat","lng","zoom","mapTypeId","elementId","changeHandler","searchBox","places","Autocomplete","bindTo","setFields","addListener","placeName","latitude","longitude","bounds","placeLatLng","LatLng","marker","Marker","title","position","extend","saveInfoWindow","_this","openInfoWindow","fitBounds","getBounds","setZoom","panTo","getPosition","bounceMarker","infoWindow","content","create","open","setAnimation","Animation","BOUNCE","setTimeout","FourSquareAPI","radius","query","process","fetch","response","json","payload","venues","groups","items","sortedResultsByRating","sort","sortByRating","forEach","aVenue","mapBounds","LatLngBounds","addMarkerToMap","addInfoWindowToMarker","SearchInput","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handlePlaceChange","FSAPI","searchForNearby","searchRadius","searchText","then","saveSearchResults","addVenuesToMap","catch","reason","console","log","placesService","PlacesService","handleChange","bind","assertThisInitialized","showTopAttractions","emitChangeDebounce","debounce","queryLocation","createSearchBox","event","target","value","enteredText","setState","_this2","tablet","desktop","textfield","tabIndex","box","withTrailingIcon","icon","fullwidth","onChange","label","placeholder","aria-label","className","fab","onClick","raised","role","React","Component","SearchResults","currentVenueInResults","pageForwardDisabled","pageBackDisabled","pageForwardResults","pageBackResults","showInfoWindow","searchResults","prevState","searchResultsLimit","_this3","_this4","reduce","resultsToDisplay","currentVenue","currentIndex","push","find","element","_this5","data_table","getVenuesToDisplay","key","Venue","_rmwc_button","disabled","outlined","toString","SearchPage","infowindow","isInfoWindowOpen","close","phone","components_SearchInput","components_SearchResults","NeighborhoodMap","loadGoogleMap","createMap","mapIsLoaded","mapHasError","error","Number","parseFloat","parseInt","addScriptToDOM","top_app_bar","alignStart","Switch","Route","exact","path","render","components_SearchPage","typography","use","components_Map","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","BrowserRouter","src_App","URL","origin","addEventListener","headers","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1a25c2d2.chunk.js","sourcesContent":["import React from 'react';\n\n// React Material Web Components\nimport { Grid, GridCell } from '@rmwc/grid';\n\n// Application Components\nimport '../css/App.css';\n\nconst Map = (props) => {\n\n  /**\n   * @description Create the map area containing the map of our neighborhood\n   * @returns {HTMLDivElement} Main application page\n   * @memberof Map\n   */\n  return (\n    <div>\n      <Grid>\n        <GridCell span=\"8\">\n          <section id=\"map\" />\n        </GridCell>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Map;\n","import { removeSpecialChars } from './utilFunctions';\n\nclass Place {\n  /**\n   * @description Get the address of the venue\n   * @static\n   * @param {venueDetail} venueDetail Characteristics of a specific venue\n   * @returns {String} Formatted address\n   * @memberof Place\n   */\n  static getFormattedAddress(venueDetail) {\n    let { address, city, state, postal_code } = venueDetail.venue.location;\n    if (address === undefined && city === undefined && state === undefined &&\n        postal_code === undefined) {\n      return '';\n    }\n    address = address !== undefined ? address : '';\n    city = city !== undefined ? city : '';\n    state = state !== undefined ? state : '';\n    postal_code  = postal_code  !== undefined ? postal_code  : '';\n    return `${address}, ${city}, ${state}  ${postal_code}`;\n  }\n\n  /**\n   * @description Create HTML elements containing the formatted address\n   * @static\n   * @param {venueDetail} venueDetail Characteristics of a specific venue\n   * @returns {String} Two <div> tags containing the formatted address\n   * @memberof Place\n   */\n  static createFormattedAddressHTML(venueDetail) {\n    const address = this.getFormattedAddress(venueDetail);\n    if (address === '') {\n      return '';\n    }\n    // Return the address separated into two lines\n    const firstComma = address.indexOf(',');\n    return (\n      `<div>${ address.slice(0,firstComma) }</div>\n      <div>${ address.slice(firstComma+1) }</div>`\n    );\n  }\n\n  /**\n   * @description Retrieve the venue name\n   * @static\n   * @param {venueDetail} venueDetail Characteristics of a specific venue\n   * @returns {String} Place name\n   * @memberof Place\n   */\n  static getName(venueDetail) {\n    if (venueDetail.venue.name === undefined) {\n      return '';\n    }\n    return venueDetail.venue.name;\n  }\n\n  /**\n   * @description Get the popularity rating for the venue\n   * @param {venueDetail} venueDetail Characteristics of the selected venue\n   * @returns {String} venue rating\n   * @memberof Place\n   */\n  static getRating(venueDetail) {\n    // Translate the numerical venue rating to a graphical star rating\n    if (venueDetail.rating === undefined) {\n      return 0;\n    }\n    return venueDetail.rating.toFixed(1);\n  }\n\n  /**\n   * @description Create HTML elements containing the rating\n   * @param {venueDetail} venueDetail Characteristics of the selected venue\n   * @returns {String} Formatted popularity rating of the venue\n   * @memberof Place\n   */\n  static createRatingHTML(venueDetail) {\n    const rating = this.getRating(venueDetail);\n    if (rating === 0) {\n      return '';\n    }\n\n    // Translate the numerical venue rating to a graphical star rating\n    const ICON_STAR = 'star ';  // Material Design Icon Font - star\n    const ICON_STAR_HALF = 'star_half '; // Material Design Icon Font - star_half\n    const noWholeStars = Math.floor(rating);\n    let starRating = '';\n\n    for (let i = 0; i < noWholeStars; i += 1) {\n      starRating += ICON_STAR;\n    }\n    if (rating > noWholeStars) {\n      starRating += ICON_STAR_HALF;\n    }\n\n    return (\n      `<span class=\"iw-chip\">\n        <i class=\"material-icons iw-rating\">${ starRating }</i>\n      </span>`\n    );\n  }\n\n  /**\n   * @description Get the here now status of the venue\n   * @static\n   * @param {venueDetail} venueDetail Characteristics of the selected venue\n   * @returns {String} Here now status of the venue\n   * @memberof InfoWindow\n   */\n  static getHereNow(venueDetail) {\n    if (venueDetail.venue.hereNow.summary === undefined) {\n      return '';\n    }\n    return venueDetail.venue.hereNow.summary;\n  }\n\n  /**\n   * @description Create HTML elements containing the venue's status\n   * @static\n   * @param {venueDetail} venueDetail Characteristics of the selected venue\n   * @returns {String} Formatted open/close status of the venue\n   * @memberof Place\n   */\n  static createHereNowHTML(venueDetail) {\n    const status = this.getHereNow(venueDetail);\n    if (status === '') {\n      return '';\n    }\n    return (\n      `<span class=\"iw-chip\">${ status }</span>`\n    );\n  }\n\n    /**\n   * @description Get the venue's first categorization\n   * @static\n   * @param {venueDetail} venueDetail Characteristics of the selected venue\n   * @returns {String} Formatted venue category\n   * @memberof Place\n   */\n  static getFirstCategory(venueDetail) {\n    if (venueDetail.venue.categories === undefined || \n        venueDetail.venue.categories.length === 0) {\n      return '';\n    }\n    return venueDetail.venue.categories[0].shortName.charAt(0).toUpperCase() +\n      removeSpecialChars(venueDetail.venue.categories[0].shortName.slice(1));\n  }\n\n  /**\n   * @description Create an HTML element containing the venue's first type\n   * @static\n   * @param {venueDetail} venueDetail Characteristics of the selected venue\n   * @returns {String} Formatted first type of the venue\n   * @memberof Place\n   */\n  static createFirstCategoryHTML(venueDetail) {\n    // Return only the first type associated with the venue\n    const firstCategory = this.getFirstCategory(venueDetail);\n    if (firstCategory === '') {\n      return '';\n    }\n    return (\n      `<span class=\"iw-chip\">\n        ${ firstCategory }\n      </span>`\n    );\n  }\n\n}\n\nexport default Place;","/**\n * @description Remove all special characters from a string\n * @param {String} string String from which the special characters are to be removed\n * @returns {String} Original string with special characters removed\n */\nconst removeSpecialChars = (string) => {\n  const specialCharacters = '_';\n  const specialCharArray = specialCharacters.split('');\n  return string.split('').map( (char) => {\n    if (specialCharArray.indexOf(char) > -1) {\n      return ' ';\n    }\n    return char;\n  }).join('');\n};\n\nexport { removeSpecialChars };","import VenueInfo from '../utils/VenueInfo';\nimport '../css/App.css';\n\nclass InfoWindow {\n\n  /**\n   * @description Create HTML-formatted content to be placed in the Infowindow\n   * @param {Object} venueDetail Object containing details about this venue\n   * @returns {String} HTML-formatted content\n   * @memberof InfoWindow\n   */\n  static create(venueDetail) {\n    return (\n      `<div class=\"full-width gm-style-iw\">\n        <div class=\"title\">\n          <p class=\"venue-name\">${VenueInfo.getName(venueDetail)}</p>\n        </div>\n        <div class=\"address-line\">\n          ${VenueInfo.createFormattedAddressHTML(venueDetail)}\n        <div/>\n        <div class=\"iw-attrs\">\n          ${VenueInfo.createFirstCategoryHTML(venueDetail)}\n          ${VenueInfo.createHereNowHTML(venueDetail)}\n        </div>\n        <div>\n          <p class=\"footnote\">Venue info via Foursquare</p>\n      </div>`);\n  }\n\n}\n\nexport default InfoWindow;","\nimport InfoWindow from '../components/InfoWindow';\n\nclass MapsAPI {\n\n  /**\n   * @description Add a <script> tag to the DOM\n   * @param {String} url URL of the script source location\n   * @param {function} callback Optional `onload` callback function\n   */\n  static addScriptToDOM(url, callback) {\n    let script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    if ( callback ) {\n      script.onload = callback;\n    }\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n    script.src = url;\n  }\n\n  /**\n   * @description Create a new map\n   * @param {Object} home LatLng of our neighborhood\n   * @returns {Map} Google Map\n   * @memberof MapsAPI\n   */\n  static createMap(home) {\n    return new Promise((resolve,reject) => {\n      const map = new window.google.maps.Map(document.getElementById('map'), {\n        center: { lat: home.lat, lng: home.lng },\n        zoom: 12,\n        mapTypeId: 'roadmap'\n      });\n      resolve(map);\n    });\n  }\n\n  /**\n   * @description Enable autocomplete for the place search imput element\n   * @param {Object} map Map\n   * @param {String} elementId DOM element id of the search input field\n   * @param {Function} changeHandler Listener to be invoked when the place changes\n   * @returns {Object} Google Maps Search Box\n   * @memberof MapsAPI\n   */\n  static createSearchBox(map, elementId, changeHandler) {\n    const searchBox = new window.google.maps.places.Autocomplete(\n      document.getElementById(elementId)\n    );\n    searchBox.bindTo('bounds', map);\n    searchBox.setFields( ['id', 'name', 'types', 'rating', 'icon', 'geometry'] );\n    searchBox.addListener('place_changed', changeHandler);\n    return searchBox;\n  }\n\n  /**\n   * @description Add a marker to the map for the specified place\n   * @param {Object} map Map\n   * @param {Object} place A place returned as the result of a search\n   * @param {LatLngBounds} bounds Boundry of the neighborhood map\n   * @memberof SearchInput\n   */\n  static addMarkerToMap(map, placeName, latitude, longitude, bounds) {\n    const placeLatLng = new window.google.maps.LatLng({ lat: latitude, lng: longitude }); \n    const marker = new window.google.maps.Marker({\n      map: map,\n      title: placeName,\n      position: placeLatLng,\n    });\n\n    bounds.extend(marker.position);\n    return marker;\n  }\n\n  /**\n   * @description Add an infowindow to the specified marker\n   * @param {Object} map Map\n   * @param {String} venue Venue object from Foursquare\n   * @param {Object} marker Marker the place is to be associated with\n   * @param {Function} saveInfoWindow Callback to save the reference to the\n   * InfoWindow\n   * @memberof SearchInput\n   */\n  static addInfoWindowToMarker(map, venue, marker, saveInfoWindow) {\n    marker.addListener('click', () => {\n      this.openInfoWindow(map, venue, marker, saveInfoWindow);\n    });\n    map.fitBounds(map.getBounds());\n    map.setZoom(12);\n}\n\n  /**\n   * @description Open an InfoWindow\n   * @static\n   * @param {Object} map Map\n   * @param {String} venue Venue object from Foursquare\n   * @param {Object} marker Marker the place is to be associated with\n   * @param {Function} saveInfoWindow Callback to save the open InfoWindow\n   * when resolved.\n   * @memberof MapsAPI\n   */\n  static openInfoWindow(map, venue, marker, saveInfoWindow) {\n    map.panTo(marker.getPosition());\n    this.bounceMarker(marker);\n    const infoWindow = new window.google.maps.InfoWindow({\n      content: InfoWindow.create(venue)\n    });\n    saveInfoWindow(infoWindow);\n    infoWindow.open(map, marker);\n  }\n\n  /**\n   * @description Animate a marker by bouncing it in place\n   * @static\n   * @param {Object} marker Google Maps place marker\n   * @memberof MapsAPI\n   */\n  static bounceMarker(marker) {\n    marker.setAnimation(window.google.maps.Animation.BOUNCE);\n    setTimeout(() => {\n      marker.setAnimation(null);\n    }, 1000);\n  }\n}\n\nexport default MapsAPI;","import MapsAPI from '../utils/MapsAPI';\n\nclass FourSquareAPI {\n  /**\n   * @description Search for nearby places\n   * @static\n   * @param {Number} latitude Locations latitude\n   * @param {Number} longitude Locations longitude\n   * @param {Number} radius Radius (in meters) to constrain the search within\n   * @param {String} query Optional. Keyword to search for\n   * @returns {Object[]} Array of result venues\n   * @memberof FourSquareAPI\n   */\n  static async searchForNearby(latitude, longitude, radius, query) {\n    let url = `https://api.foursquare.com/v2/venues/explore` +\n      `?v=20180323` +\n      `&client_id=${process.env.REACT_APP_FS_CLIENT_ID}` +\n      `&client_secret=${process.env.REACT_APP_FS_CLIENT_SECRET}` +\n      `&ll=${latitude},${longitude}` +\n      `&intent=browse` +\n      `&radius=${radius}`;\n    url = query === undefined ? url : url + `&query=${query}`;\n    let response = await fetch(url);\n    let payload = await response.json();\n    let venues = payload.response.groups[0].items;\n\n    // Sort the results in descending rating sequence\n    let sortedResultsByRating = venues.sort(this.sortByRating);\n\n    return sortedResultsByRating;\n  }\n\n  /**\n   * @description Add venues to the map\n   * @static\n   * @param {Object} map Map markers are to be placed on\n   * @param {Object[]} venues Venues to be added to the map\n   * @param {Function} saveInfoWindow Callback to save the active InfoWindow\n   * @memberof FourSquareAPI\n   */\n  static addVenuesToMap(map, venues, saveInfoWindow) {\n    venues.forEach(aVenue => {\n      const mapBounds = new window.google.maps.LatLngBounds();\n      const marker = MapsAPI.addMarkerToMap(map, aVenue.name, \n        aVenue.venue.location.lat, aVenue.venue.location.lng, mapBounds);\n      aVenue[\"marker\"] = marker;\n      MapsAPI.addInfoWindowToMarker(map, aVenue, marker, saveInfoWindow);\n    });\n  }\n}\n\nexport default FourSquareAPI;","import React from 'react';\nimport debounce from \"lodash.debounce\";\nimport PropTypes from 'prop-types';\n\n// React Material Web Components\nimport { Fab } from '@rmwc/fab';\nimport { Grid, GridCell } from '@rmwc/grid';\nimport { TextField, TextFieldIcon } from '@rmwc/textfield';\n\n// Application Components\nimport FSAPI from '../utils/FoursquareAPI';\nimport MapsAPI from '../utils/MapsAPI';\nimport '../css/App.css';\n\nclass SearchInput extends React.Component {\n\n  static propTypes = {\n    home: PropTypes.object.isRequired,\n    searchRadius: PropTypes.number.isRequired,\n    map: PropTypes.object.isRequired,\n    searchResultsLimit: PropTypes.number.isRequired,\n    saveSearchResults: PropTypes.func.isRequired,\n    saveInfoWindow: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @description Establish the state for this component\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    // SearchPage state\n    this.state = {\n      searchText: \"\",\n      placesService: new window.google.maps.places.PlacesService(this.props.map)\n    };\n\n    // Bind 'this' to the event handlers so they'll have the proper context\n    this.handleChange = this.handleChange.bind(this);\n    this.showTopAttractions = this.showTopAttractions.bind(this);\n    this.emitChangeDebounce = debounce(this.queryLocation, 150);\n  }\n\n  /**\n   * @description Link Google Maps Autocomplete to the search text fiels\n   * @memberof SearchInput\n   */\n  componentDidMount() {\n    // Default to search for local attractions\n    this.showTopAttractions();\n\n    MapsAPI.createSearchBox(this.props.map,\n      'search-text', this.handlePlaceChange);\n  }\n\n  /**\n   * @description Add input entered by the user to the searchText element in\n   * our state. Keystrokes are debounced to prevend the queryLocation function\n   * from being called too many times in succession to reduce overhead.\n   * @param {Object} event onChange event\n   */\n  handleChange(event) {\n    this.emitChangeDebounce(event.target.value);\n  }\n\n  /**\n   * @description Conduct a nearby search using the user-specified search\n   * keywords. Searches are constrained to be within a given radius of the\n   * center position of our neighborhood.\n   * @memberof SearchInput\n   */\n  handlePlaceChange = () => {\n    FSAPI.searchForNearby(this.props.home.lat, this.props.home.lng,\n      this.props.searchRadius, this.state.searchText)\n    .then(venues => {\n      this.props.saveSearchResults(venues);\n      FSAPI.addVenuesToMap(this.props.map, venues, this.props.saveInfoWindow);\n    })\n    .catch(reason => console.log(reason));\n  }\n\n  /**\n   * @description Search Google Maps for matching locations within our\n   * neighborhood\n   * @param {String} enteredText Search terms entered by the user\n   */\n  queryLocation(enteredText) {\n    this.setState({ searchText: enteredText });\n  };\n\n  /**\n   * @description Search for the top attractions in the neighborhood\n   * @memberof SearchInput\n   */\n  showTopAttractions() {\n    // Retrieve a list of popular location from Google Places within the\n    // search radius\n    this.queryLocation(\"\");\n    FSAPI.searchForNearby(this.props.home.lat, this.props.home.lng,\n        this.props.searchRadius, 'NASA')\n      .then(venues => {\n        this.props.saveSearchResults(venues);\n        FSAPI.addVenuesToMap(this.props.map, venues, this.props.saveInfoWindow);\n      })\n      .catch(reason => console.log(reason));\n  }\n\n  /**\n   * @description Capture search terms entered by the user to locate places\n   * and locations on our neighborhood map\n   * @returns {HTMLDivElement} Search text field\n   * @memberof SearchInput\n   */\n  render() {\n    return (\n      <div>\n        <Grid>\n          <GridCell span=\"4\" tablet =\"8\" desktop=\"12\">\n            <TextField id=\"search-text\" tabIndex=\"0\" box\n              withTrailingIcon={<TextFieldIcon icon='search' />}\n              fullwidth type=\"text\" onChange={ this.handleChange }\n              label=\"Enter the place you want to find...\"\n              placeholder=\"\" value={ this.state.searchText }\n              aria-label=\"Enter search terms for places search\" />\n          </GridCell>\n          <GridCell span=\"4\" tablet=\"8\" desktop=\"12\" className=\"center-contents\">\n            <Fab id=\"top-attractions-btn\" tabIndex=\"0\"\n              onClick={ this.showTopAttractions }\n              raised=\"true\" icon=\"thumb_up_alt\" label=\"Top Places...\"\n              aria-label=\"Show top places\"\n              role=\"button\" />\n          </GridCell>\n         </Grid>\n      </div>\n    )\n  };\n}\n\nexport default SearchInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// React Material Web Components\nimport { ButtonIcon } from '@rmwc/button';\nimport { DataTable, DataTableContent, DataTableHead, DataTableBody,\n  DataTableHeadCell, DataTableRow, DataTableCell } from '@rmwc/data-table';\n\n  // Application Components\nimport MapsAPI from '../utils/MapsAPI';\nimport Venue from '../utils/VenueInfo';\nimport '../css/App.css';\n\nclass SearchResults extends React.Component {\n\n  static propTypes = {\n    map: PropTypes.object.isRequired,\n    searchResults: PropTypes.array.isRequired,\n    searchResultsLimit: PropTypes.number.isRequired,\n    saveInfoWindow: PropTypes.func.isRequired,\n  }\n\n  /**\n   * @description Establish the state for this component\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentVenueInResults: 0,\n      pageForwardDisabled: false,\n      pageBackDisabled: false,\n      placesService: new window.google.maps.places.PlacesService(this.props.map)\n    };\n\n    // Bind 'this' to the event handlers so they'll have the proper context\n    this.pageForwardResults = this.pageForwardResults.bind(this);\n    this.pageBackResults = this.pageBackResults.bind(this);\n    this.showInfoWindow = this.showInfoWindow.bind(this);\n  }\n\n  /**\n   * @description Page forward to the prior set of search results by updating\n   * the index of the starting display point in the search results\n   * @memberof SearchResults\n   */\n  pageForwardResults() {\n    if ( this.state.currentVenueInResults < this.props.searchResults.length ) {\n      this.setState({ pageForwardDisabled: false });\n      this.setState((prevState) => {\n        return { currentVenueInResults:  prevState.currentVenueInResults +\n          this.props.searchResultsLimit };\n      });\n    } else {\n      this.setState({ pageForwardDisabled: true });\n    }\n  }\n\n  /**\n   * @description Page back to the prior set of search results by updating the\n   * index of the starting display point in the search results\n   * @memberof SearchResults\n   */\n  pageBackResults() {\n    if ( this.state.currentVenueInResults > 0 ) {\n      this.setState({ pageBackDisabled: false });\n      this.setState((prevState) => {\n        return { currentVenueInResults:  prevState.currentVenueInResults -\n          this.props.searchResultsLimit };\n      });\n    } else {\n      this.setState({ pageBackDisabled: true });\n    }\n  }\n\n  /**\n   * @description Retrieve a subset of the search results to display\n   * @returns {Object[]} Array containing the places in the search results\n   * to display\n   * @memberof SearchResults\n   */\n  getVenuesToDisplay() {\n    return this.props.searchResults\n      .reduce((resultsToDisplay, currentVenue, currentIndex) => {\n        if (currentIndex >= this.state.currentVenueInResults &&\n          currentIndex <= (this.state.currentVenueInResults +\n            this.props.searchResultsLimit - 1) ) {\n          resultsToDisplay.push(currentVenue)\n        }\n        return resultsToDisplay;\n      }, []);\n  }\n\n  /**\n   * @description Show the infowindow for the selected venue\n   * @param {Object} aVenue Venue information\n   * @memberof SearchResults\n   */\n  showInfoWindow(aVenue) {\n    const marker = this.props.searchResults.find(element => {\n      return element.venue.id === aVenue.aVenue.venue.id;\n    }).marker;\n    MapsAPI.openInfoWindow(this.props.map, aVenue.aVenue, marker,\n      this.props.saveInfoWindow);\n  }\n\n  /**\n   * @description Display search results\n   * @returns {HTMLDivElement} Main application page\n   * @memberof SearchResults\n   */\n  render() {\n    return (\n      <div>\n        <h3>Search Results...</h3>\n        {\n          this.props.searchResults.length > 0 ? (\n            <div>\n              <DataTable>\n                <DataTableContent>\n                  <DataTableHead className=\"table-heading\">\n                    <DataTableRow>\n                      <DataTableHeadCell>Name</DataTableHeadCell>\n                    </DataTableRow>\n                  </DataTableHead>\n                  <DataTableBody>\n                    { // Standard practice would normally be to invoke a\n                      // cubordinate component to emit individual rows. Hoever,\n                      // errors are emitted when RMWC Data Table elements are\n                      // subdivided by <div>'s, which is required in render()\n                      // methods. For this reason we iterate over the results here.\n                      this.getVenuesToDisplay().map((aVenue) => (\n                        <DataTableRow key={ aVenue.venue.id }>\n                          <DataTableCell tabIndex=\"0\"\n                            onClick={ () => this.showInfoWindow({ aVenue }) }>\n                            { Venue.getName(aVenue) }\n                          </DataTableCell>\n                        </DataTableRow >\n                      ))\n                    }\n                  </DataTableBody>\n                </DataTableContent>\n              </DataTable>\n              <div className=\"center-contents\">\n                <ButtonIcon id=\"page-up-btn\" tabIndex=\"0\" role=\"button\"\n                  onClick={ this.pageBackResults }\n                  disabled={ this.state.pageBackDisabled }\n                  outlined={ this.state.pageBackDisabled.toString() }\n                  icon=\"arrow_upward\" aria-label=\"Page up results\">\n                </ButtonIcon>\n                <ButtonIcon id=\"page-down-btn\" tabIndex=\"0\" role=\"button\"\n                  onClick={ this.pageForwardResults }\n                  disabled={ this.state.pageForwardDisabled }\n                  outlined={ this.state.pageForwardDisabled.toString() }\n                  icon=\"arrow_downward\" aria-label=\"Page down results\">\n                </ButtonIcon>\n              </div>\n            </div>\n          ) : (\n            <p>No matching places found!</p>\n          )\n        }\n      </div>\n    )\n  }\n}\n\n\nexport default SearchResults;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// React Material Web Components\nimport { Grid, GridCell } from '@rmwc/grid';\n\n// Application Components\nimport SearchInput from './SearchInput.js'\nimport SearchResults from './SearchResults.js'\nimport '../css/App.css';\n\nclass SearchPage extends React.Component {\n\n  static propTypes = {\n    home: PropTypes.object.isRequired,\n    searchRadius: PropTypes.number.isRequired,\n    searchResultsLimit: PropTypes.number.isRequired,\n    map: PropTypes.object.isRequired,\n  }\n\n  /**\n   * @description Establish the state for this component\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      isInfoWindowOpen: false,\n      infoWindow: 0,\n    };\n  }\n\n  /**\n   * @description Save the reference to an open infowindow in the state\n   * @param {Object} infowindow InfoWindow object reference\n   * @memberof SearchPage\n   */\n  saveInfoWindow = (infowindow) => {\n    if (this.state.isInfoWindowOpen && this.state.infoWindow !== 0) {\n      this.state.infoWindow.close();\n    }\n    this.setState({ isInfoWindowOpen: true });\n    this.setState({ infoWindow: infowindow });\n  };\n\n  /**\n   * @description Replace the search results in the state\n   * @param {Object[]} searchResults Array of place results\n   * @memberof NeighborhoodMap\n   */\n  saveSearchResults = (searchResults) => {\n    this.setState({ searchResults: searchResults });\n  };\n\n  /**\n   * @description Create the search page which provides the user with the means\n   * to search on locations and places\n   * @returns {HTMLDivElement} Main application page\n   * @memberof SearchPage\n   */\n  render() {\n    return (\n      <div>\n        <Grid>\n          <GridCell span=\"4\" phone=\"4\" tablet=\"7\" desktop=\"11\">\n            <SearchInput handleChange={ this.handleChange }\n              home={ this.props.home }\n              searchRadius={ this.props.searchRadius }\n              map={ this.props.map }\n              searchResultsLimit={ this.props.searchResultsLimit }\n              saveSearchResults={ this.saveSearchResults }\n              saveInfoWindow={ this.saveInfoWindow }\n            />\n            <SearchResults map={ this.props.map }\n              searchResults={ this.state.searchResults }\n              searchResultsLimit={ this.props.searchResultsLimit }\n              saveInfoWindow={ this.saveInfoWindow }\n            />\n          </GridCell>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default SearchPage;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n// React Material Web Components\nimport { Grid, GridCell } from '@rmwc/grid';\nimport { TopAppBar, TopAppBarRow, TopAppBarSection, TopAppBarTitle } from '@rmwc/top-app-bar';\nimport { Typography } from '@rmwc/typography';\n\n// Application Components\nimport Map from './components/Map';\nimport SearchPage from './components/SearchPage';\nimport MapsAPI from './utils/MapsAPI';\nimport './css/App.css';\n\nclass NeighborhoodMap extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // App state\n    this.state = {\n      // Coordinates of the center of our neighborhood\n      home: {\n        lat: Number.parseFloat(process.env.REACT_APP_LAT),\n        lng: Number.parseFloat(process.env.REACT_APP_LNG)\n      },\n      // Maximum search radius in meters\n      searchRadius: Number.parseInt(process.env.REACT_APP_SEARCH_RADIUS,10),\n      searchResultsLimit: Number.parseInt(process.env.REACT_APP_SEARCH_RESULTS_LIMIT, 10),\n      mapHasError: false,\n      map: {},\n      mapIsLoaded: false,\n    };\n  }\n\n  /**\n   * @description Load the Google map for our neighborhood and add insert it\n   * into the DOM\n   * @memberof NeighborhoodMap\n   */\n  componentDidMount() {\n    MapsAPI.addScriptToDOM(process.env.REACT_APP_MAPS_URL, this.loadGoogleMap);\n  }\n\n  /**\n   * @description Load the Neighborhood map\n   * @returns {Promise} Promise that will be resolved when the map is loaded\n   * @memberof NeighborhoodMap\n   */\n  loadGoogleMap = () => {\n    MapsAPI.createMap(this.state.home)\n    .then(map => {\n      this.setState({ map: map });\n      this.setState({ mapIsLoaded: true });\n      this.setState({ mapHasError: false });\n    })\n    .catch(error => {\n      console.log('Failed to load map. Error: ', error);\n      this.setState({ mapHasError: true });\n    });\n  };\n\n  /**\n   * @description Create the HTML for the following application pages:\n   * - Search page to allow the user to search for locations and places\n   * - Details page showing detail information about a specific location\n   * @returns {HTMLDivElement} Main application page\n   * @memberof NeighborhoodMap\n   */\n  render() {\n    return (\n      <div>\n\n        <header>\n          <TopAppBar>\n            <TopAppBarRow>\n              <TopAppBarSection alignStart>\n                <TopAppBarTitle>Neighborhood Map</TopAppBarTitle>\n              </TopAppBarSection>\n            </TopAppBarRow>\n          </TopAppBar>\n        </header>\n\n        <main>\n          <Grid>\n            <GridCell span=\"4\" phone=\"4\" tablet=\"3\" desktop=\"4\">\n              {\n                this.state.mapIsLoaded ? (\n                  <Switch>\n                    <Route exact path='/' render={() => (\n                      <SearchPage\n                        home={ this.state.home}\n                        searchRadius={ this.state.searchRadius }\n                        searchResultsLimit={ this.state.searchResultsLimit }\n                        map={ this.state.map }\n                      />\n                    )} />\n                  </Switch>\n                ) : ('')\n              }\n            </GridCell>\n            {\n              this.state.mapHasError ? (\n                <GridCell className=\"map-container\" span=\"4\" phone=\"4\" tablet=\"4\" desktop=\"8\">\n                  <Typography use=\"headline5\">Google Maps API failure!</Typography>\n                  <Typography use=\"body1\">\n                    An error has occurred building the map. Please try again.\n                  </Typography>\n                </GridCell>\n              ) : (\n                <GridCell className=\"map-container\" span=\"4\" phone=\"4\" tablet=\"4\" desktop=\"8\">\n                  <Map id=\"map\"/>\n                </GridCell>\n              )\n            }\n          </Grid>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default NeighborhoodMap;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}